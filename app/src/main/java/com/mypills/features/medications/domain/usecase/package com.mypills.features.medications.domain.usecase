package com.mypills.features.medications.domain.usecase

import javax.inject.Inject
import com.mypills.features.medications.data.api.ProductApiService
import com.mypills.features.medications.domain.model.Medication
import kotlinx.datetime.Clock

class GetProductByBarcodeUseCase @Inject constructor(
    private val productApi: ProductApiService
) {
    suspend operator fun invoke(barcode: String): Result<Medication?> {
        return try {
            val response = productApi.getProduct(barcode)
            if (response.isSuccessful && response.body()?.product != null) {
                val product = response.body()!!.product!!
                
                val medication = Medication(
                    id = java.util.UUID.randomUUID().toString(),
                    name = product.product_name ?: "Produto Desconhecido",
                    description = product.generic_name,
                    dosage = extractDosage(product.quantity),
                    unit = extractUnit(product.quantity),
                    totalQuantity = 0,
                    currentQuantity = 0,
                    expirationDate = null,
                    barcode = barcode,
                    imageUrl = product.image_url,
                    price = null,
                    pharmacy = null,
                    prescription = false,
                    notes = "Adicionado via cÃ³digo de barras",
                    createdAt = Clock.System.now(),
                    updatedAt = Clock.System.now()
                )
                
                Result.success(medication)
            } else {
                Result.success(null)
            }
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
    
    private fun extractDosage(quantity: String?): String {
        // Extract numeric dosage from quantity string
        return quantity?.let { q ->
            Regex("""(\d+(?:\.\d+)?)\s*(mg|ml|g|l)""", RegexOption.IGNORE_CASE)
                .find(q)?.groupValues?.get(1) ?: "1"
        } ?: "1"
    }
    
    private fun extractUnit(quantity: String?): String {
        // Extract unit from quantity string
        return quantity?.let { q ->
            Regex("""(\d+(?:\.\d+)?)\s*(mg|ml|g|l)""", RegexOption.IGNORE_CASE)
                .find(q)?.groupValues?.get(2) ?: "un"
        } ?: "un"
    }
}
