package com.mypills.core.database

import androidx.room.*
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase
import kotlinx.datetime.*
import kotlinx.serialization.encodeToString
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import com.mypills.core.database.dao.*
import com.mypills.core.database.entity.*

// Type Converters para tipos complexos
@TypeConverters(DatabaseConverters::class)
@Database(
    entities = [
        // Medications
        MedicationEntity::class,
        MedicationScheduleEntity::class,
        MedicationLogEntity::class,
        // Finances
        FinancialAccountEntity::class,
        FinancialTransactionEntity::class,
        BudgetEntity::class,
        // Transport
        BusRouteEntity::class,
        BusStopEntity::class,
        RouteStopEntity::class,
        FavoriteRouteEntity::class,
        // Reminders
        ReminderEntity::class,
        // Shopping
        ShoppingListEntity::class,
        ShoppingItemEntity::class,
        PriceHistoryEntity::class,
        // Assistant
        ConversationEntity::class,
        MessageEntity::class,
        // Analytics
        AppUsageEntity::class,
        WidgetConfigEntity::class
    ],
    version = 1,
    exportSchema = true
)
abstract class AppDatabase : RoomDatabase() {
    abstract fun medicationDao(): MedicationDao
    abstract fun financesDao(): FinancesDao
    abstract fun transportDao(): TransportDao
    abstract fun remindersDao(): RemindersDao
    abstract fun shoppingDao(): ShoppingDao
    abstract fun assistantDao(): AssistantDao
    abstract fun analyticsDao(): AnalyticsDao
}

class DatabaseConverters {
    private val json = Json { ignoreUnknownKeys = true }

    // LocalDate converters
    @TypeConverter
    fun fromLocalDate(date: LocalDate?): String? = date?.toString()

    @TypeConverter
    fun toLocalDate(dateString: String?): LocalDate? = 
        dateString?.let { LocalDate.parse(it) }

    // LocalTime converters
    @TypeConverter
    fun fromLocalTime(time: LocalTime?): String? = time?.toString()

    @TypeConverter
    fun toLocalTime(timeString: String?): LocalTime? = 
        timeString?.let { LocalTime.parse(it) }

    // Instant converters
    @TypeConverter
    fun fromInstant(instant: Instant?): Long? = instant?.toEpochMilliseconds()

    @TypeConverter
    fun toInstant(timestamp: Long?): Instant? = 
        timestamp?.let { Instant.fromEpochMilliseconds(it) }

    // Set<DayOfWeek> converters
    @TypeConverter
    fun fromDaysOfWeek(days: Set<DayOfWeek>): String = 
        json.encodeToString(days.map { it.name })

    @TypeConverter
    fun toDaysOfWeek(daysString: String): Set<DayOfWeek> = 
        json.decodeFromString<List<String>>(daysString)
            .map { DayOfWeek.valueOf(it) }
            .toSet()

    // List<String> converters
    @TypeConverter
    fun fromStringList(list: List<String>): String = json.encodeToString(list)

    @TypeConverter
    fun toStringList(listString: String): List<String> = 
        json.decodeFromString(listString)

    // Enum converters
    @TypeConverter
    fun fromMedicationStatus(status: MedicationStatus): String = status.name

    @TypeConverter
    fun toMedicationStatus(statusString: String): MedicationStatus = 
        MedicationStatus.valueOf(statusString)

    @TypeConverter
    fun fromAccountType(type: AccountType): String = type.name

    @TypeConverter
    fun toAccountType(typeString: String): AccountType = 
        AccountType.valueOf(typeString)

    @TypeConverter
    fun fromTransactionType(type: TransactionType): String = type.name

    @TypeConverter
    fun toTransactionType(typeString: String): TransactionType = 
        TransactionType.valueOf(typeString)

    @TypeConverter
    fun fromBudgetPeriod(period: BudgetPeriod): String = period.name

    @TypeConverter
    fun toBudgetPeriod(periodString: String): BudgetPeriod = 
        BudgetPeriod.valueOf(periodString)

    @TypeConverter
    fun fromReminderType(type: ReminderType): String = type.name

    @TypeConverter
    fun toReminderType(typeString: String): ReminderType = 
        ReminderType.valueOf(typeString)

    @TypeConverter
    fun fromReminderPriority(priority: ReminderPriority): String = priority.name

    @TypeConverter
    fun toReminderPriority(priorityString: String): ReminderPriority = 
        ReminderPriority.valueOf(priorityString)

    @TypeConverter
    fun fromMessageType(type: MessageType): String = type.name

    @TypeConverter
    fun toMessageType(typeString: String): MessageType = 
        MessageType.valueOf(typeString)

    @TypeConverter
    fun fromWidgetType(type: WidgetType): String = type.name

    @TypeConverter
    fun toWidgetType(typeString: String): WidgetType = 
        WidgetType.valueOf(typeString)
}

// Database Module para Hilt
@dagger.Module
@dagger.hilt.InstallIn(dagger.hilt.components.SingletonComponent::class)
object DatabaseModule {

    @dagger.Provides
    @javax.inject.Singleton
    fun provideAppDatabase(
        @dagger.hilt.android.qualifiers.ApplicationContext context: android.content.Context
    ): AppDatabase {
        return androidx.room.Room.databaseBuilder(
            context,
            AppDatabase::class.java,
            "mypills_database"
        )
        .addMigrations(MIGRATION_1_2) // Exemplo para futuras migrações
        .fallbackToDestructiveMigration() // Apenas para desenvolvimento
        .build()
    }

    @dagger.Provides
    fun provideMedicationDao(database: AppDatabase): MedicationDao = 
        database.medicationDao()

    @dagger.Provides
    fun provideFinancesDao(database: AppDatabase): FinancesDao = 
        database.financesDao()

    @dagger.Provides
    fun provideTransportDao(database: AppDatabase): TransportDao = 
        database.transportDao()

    @dagger.Provides
    fun provideRemindersDao(database: AppDatabase): RemindersDao = 
        database.remindersDao()

    @dagger.Provides
    fun provideShoppingDao(database: AppDatabase): ShoppingDao = 
        database.shoppingDao()

    @dagger.Provides
    fun provideAssistantDao(database: AppDatabase): AssistantDao = 
        database.assistantDao()

    @dagger.Provides
    fun provideAnalyticsDao(database: AppDatabase): AnalyticsDao = 
        database.analyticsDao()
}

// Exemplo de migração para versões futuras
val MIGRATION_1_2 = object : Migration(1, 2) {
    override fun migrate(database: SupportSQLiteDatabase) {
        // Exemplo: adicionar nova coluna
        // database.execSQL("ALTER TABLE medications ADD COLUMN newColumn TEXT")
    }
}

// Inicialização de dados de exemplo
object DatabaseInitializer {
    suspend fun initialize(database: AppDatabase) {
        // Inserir dados iniciais se necessário
        val medicationDao = database.medicationDao()
        val financesDao = database.financesDao()
        
        // Verificar se já tem dados
        val medicationCount = medicationDao.getAllMedications()
        // Se não tiver dados, inserir exemplos
        // insertSampleData(medicationDao, financesDao)
    }
    
    private suspend fun insertSampleData(
        medicationDao: MedicationDao,
        financesDao: FinancesDao
    ) {
        // Exemplos de medicamentos
        val sampleMedication = MedicationEntity(
            id = "sample-1",
            name = "Paracetamol 500mg",
            description = "Analgésico e antitérmico",
            dosage = "500",
            unit = "mg",
            totalQuantity = 30,
            currentQuantity = 25,
            expirationDate = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date.plus(DatePeriod(months = 6)),
            barcode = null,
            imageUrl = null,
            price = 15.50,
            pharmacy = "Farmácia Popular",
            prescription = false,
            notes = "Tomar com água",
            createdAt = Clock.System.now(),
            updatedAt = Clock.System.now()
        )
        
        medicationDao.insertMedication(sampleMedication)
        
        // Exemplo de conta financeira
        val sampleAccount = FinancialAccountEntity(
            id = "account-1",
            name = "Conta Corrente",
            type = AccountType.CHECKING,
            balance = 1500.00,
            currency = "BRL",
            isActive = true,
            createdAt = Clock.System.now()
        )
        
        financesDao.insertAccount(sampleAccount)
    }
}